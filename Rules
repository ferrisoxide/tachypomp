#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

# Styling and Javascript Asset Rules
require 'compass'

unless defined? LOADED_DEFAULT_CONFIG
  LOADED_DEFAULT_CONFIG = true
  require 'compass'
  Compass.add_project_configuration 'compass/config.rb' 
end

compile '/assets/stylesheets/*' do
  filter :sass, Compass.sass_engine_options.merge(:syntax => item[:extension].to_sym)
end

# NOTE Don't worry about compiling javascripts for now 
# compile '/assets/javascripts/*' do
#   filter :erb
#   filter :concat_js
#   if ENV['NANOC_ENV'] == 'production'
#     filter :uglify_js
#   end
# end

## Do not write partials
route '/assets/stylesheets/_*/' do
  nil
end

route '/assets/stylesheets/*/' do
  item.identifier.chop + '.css'
end

# NOTE Both hpub and epub formats will eventually have their own style sheets. In 
# the case of hpub, specific javascript files may also be included
 
route '/assets/stylesheets/*/', :rep => :epub do
  # Don't build assets for epub
end

route '/assets/stylesheets/*/', :rep => :hpub do
  # Don't build assets for hpub 
end


# Ignoring javascripts for now (have been removed from /assets)
# route '/assets/javascripts/*' do
#   item.identifier.chop + '.js'
# end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :kramdown
    layout 'default'
  end
end

compile '*', :rep => :epub do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :kramdown
    layout 'epub'
  end
end

compile '*', :rep => :hpub do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :kramdown
    layout 'hpub'
  end
end
# route '/stylesheet/' do
#   '/style.css'
# end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

route '*', :rep => :epub do
  if item.binary?
    # Don't build binary items
  else  
    item_identifier = item.identifier.chop
    item_identifier = '/index' if item_identifier.empty?     
    '/epub' + item_identifier + '.xhtml'
  end  
end

route '*', :rep => :hpub do
  if item.binary?
    # Don't build binary items
  else   
    item_identifier = item.identifier.chop
    item_identifier = '/index' if item_identifier.empty?     
    '/hpub' + item_identifier + '.html'
  end  
end

layout '*', :erb